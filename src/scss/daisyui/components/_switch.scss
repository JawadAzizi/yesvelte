.#{$prefix}switch {
	@extend .toggle;
}

.#{$prefix}switch-wrapper {
	@extend .grid;
	@extend .gap-x-3;
	margin-bottom: 0.5rem;
	grid-template-columns: auto 1fr;
	& > *:not(:first-child) {
		grid-column-start: 2;
	}
	.#{$prefix}checkbox-description {
		@extend .text-sm;
		@extend .opacity-70;
	}
}

.#{$prefix}switch-wrapper-inline {
	display: inline-flex;
	margin-right: 1rem;
}
.#{$prefix}switch-wrapper-reverse {
	text-align: right;
	justify-content: end;
	grid-template-columns: 1fr auto;
	.#{$prefix}switch {
		grid-row-start: 1;
		grid-column-start: 2;
	}
	.#{$prefix}switch-label {
		grid-column-start: 1;
		grid-row-start: 1;
	}
	.#{$prefix}switch-description {
		@extend .text-sm;
		@extend .opacity-70;
		grid-column-start: 1;
	}
}

// reverse
.#{$prefix}switch-wrapper-reverse {
	.#{$prefix}switch {
		@extend .rotate-180;
	}
}

// daisyui colors
@each $colorName, $daisyuiColorName in $RoleColors {
	.#{$prefix}switch-color-#{$colorName} {
		@extend .toggle-#{$daisyuiColorName};
	}
}

@each $colorName, $daisyuiColorName in $StateColors {
	.#{$prefix}switch-color-#{$colorName} {
		@extend .toggle-#{$daisyuiColorName};
	}
}

// constant colors
@each $colorName, $colorVariant in $namedColors {
	.#{$prefix}switch-color-#{$colorName}:checked {
		background-color: map-get($colorVariant, 'default');
		border-color: map-get($colorVariant, 'default');
	}
}

// social media colors
@each $colorName, $colorVariant in $socialColors {
	.#{$prefix}switch-color-#{$colorName}:checked {
		background-color: map-get($colorVariant, 'default');
		border-color: map-get($colorVariant, 'default');
	}
}
